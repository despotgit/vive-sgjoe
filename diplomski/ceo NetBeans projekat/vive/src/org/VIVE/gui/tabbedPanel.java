/*
 * tabbedPanel.java
 *
 * Created on Среда, 2006, Мај 3, 13.27
 */

package org.VIVE.gui;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.VIVE.gui.logic.interfaces.iTabbChange;
import org.netbeans.swing.tabcontrol.TabData;
import org.netbeans.swing.tabcontrol.TabbedContainer;
import org.VIVE.gui.interfaces.iTabbedPanel;

/**
 *
 * @author  nikola
 */
public class tabbedPanel extends javax.swing.JPanel implements iTabbedPanel{
    
    //private iTabbChange tabChange;
    private Hashtable contextPanels = new Hashtable();
    protected TabbedContainer tab;
    private boolean toolActive = false;
    
    /** Creates new form tabbedPanel */
    public tabbedPanel() {
        initComponents();
        setTab(new TabbedContainer(TabbedContainer.TYPE_EDITOR));
        getTab().setSize(200,300);
        getTab().setVisible(true);
        this.add(getTab());
        //tab.addActionListener(this);
    }
    
    public void setToolActive (boolean b){
        toolActive = b;
    }
    
    public boolean getToolActive (){
        return toolActive;
    }
    
    public void addTab (String name, JPanel panel)
    {
        TabData tData = new TabData(panel,null,name,null);
        
        //contextPanels.put(name,tData);
        getTab().getModel().addTab(0,tData);
        
        getTab().setActive(toolActive); //ubacuje prelaz boje kada se klikne na tab
        getTab().getSelectionModel().setSelectedIndex(0);
    }
    
    public void setTab (String name, JPanel panel)
    {
        TabData tData = new TabData(panel,null,name,null);
        TabData oldPanel = (TabData)contextPanels.get(name);
        int oldNo = getTab().getModel().indexOf(oldPanel);
        contextPanels.remove(name);
        getTab().getModel().addTab(oldNo,tData);
        contextPanels.put(name,tData);
        
    }
    
    public JPanel getTabPanel (String name)
    {
        TabData tmp = (TabData) contextPanels.get(name);
        return (JPanel) tmp.getComponent();
    }
    
    public void removeTab(String name)
    {
        getTab().getModel().removeTab(getTab().getModel().indexOf((TabData)contextPanels.get(name)));
        contextPanels.remove(name);
    }
    
    public void setActiveTab(String name) {
        getTab().getSelectionModel().setSelectedIndex(getTab().getModel().indexOf((TabData)contextPanels.get(name)));
        getTab().updateUI();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

        public static void main (String [] arg)
    {
        JFrame tmp = new JFrame();
        tmp.setSize(400,400);
        tmp.setVisible(true);
        tabbedPanel fr = new tabbedPanel();
        fr.setVisible(true);
        
        tmp.repaint();
        fr.addTab("Drugi", new JPanel());
        fr.addTab("treci", new JPanel());
        fr.setActiveTab("Drugi");
        tmp.getContentPane().add(fr);
        fr.repaint();
    }

    public TabbedContainer getTab() {
        return tab;
    }

    public void setTab(TabbedContainer tab) {
        this.tab = tab;
    }
    
    public boolean ContainsTab(String name){
        //return contextPanels.containsKey(name);
        return false;
    }
    
    public void hideAllTabs(){
        List tabovi = tab.getModel().getTabs();
        while (tabovi.iterator().hasNext()){
            tab.getModel().removeTab(tab.getModel().indexOf((TabData)tabovi.iterator().next()));
        }
    }
    
    public boolean isTabShown (String name){
        return tab.getModel().getTabs().contains((TabData)contextPanels.get(name));
    }
    
    public void closeAllTabs(){
        for (int i=0;i<tab.getModel().getTabs().size();i++)
            tab.getModel().removeTab(i);
    }
    
   /* public void actionPerformed(ActionEvent e) {
        if (tabChange != null) tabChange.Tabbchange(e);
    }*/
  
           
}
